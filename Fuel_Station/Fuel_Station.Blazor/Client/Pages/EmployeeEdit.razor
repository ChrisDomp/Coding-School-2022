@page "/employeelist/edit/{Id:guid?}"
@using Fuel_Station.Blazor.Shared
@using Fuel_Station.Model
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Customer</PageTitle>

@if (EmployeeItem == null)
{
    <p>Loading ...</p>
}
else
{
    @if (Id == null)
    {
        <h2>Add new employee</h2>
    }
    else
    {
        <h2>Edit @($"{EmployeeItem.Surname} {EmployeeItem.Name}")</h2>
    }
    @if (ShowingErrorMessages)
    {
        <div class="row">
            <div class="alert alert-info" role="alert">
                <p>There was an error with the input fields.</p>
                <p>Please make sure that you have enter all the values correctly.</p>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-3">
            <label class="form-label">Name</label>
            <input class="form-control" @bind="@EmployeeItem.Name" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Surname</label>
            <input class="form-control" @bind="@EmployeeItem.Surname" />
        </div>
        <div class="col-md-3">
            <label for="employee-type" >Type</label>
            <select name="employee-type" class="form-select" @bind="EmployeeType" >
                <option  value="-1" >Select Item Type</option>
                @foreach (var item in Enum.GetValues(typeof(EmployeeType)))
                {
                    <option value="@((int)item)">@item.ToString()</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Salary Per Month</label>
            <input class="form-control" @bind="@EmployeeItem.SalaryPerMonth" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" @bind="@EmployeeItem.HireDateStart" />
        </div>
        <div class="col-md-3">
            <label class="form-label">End Date</label>
            <input type="date" class="form-control" @bind="@EmployeeItem.HireDateEnd" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>


}


@code {
    [Parameter] public Guid? Id { get; set ; }

    EmployeeEditViewModel EmployeeItem = new EmployeeEditViewModel();
    private int EmployeeType { get; set; } = -1;
    private bool ShowingErrorMessages = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {

            Id = Guid.Empty;
        }
        EmployeeItem = await httpClient.GetFromJsonAsync<EmployeeEditViewModel>($"employee/{Id}");
         if(Id != null)
        {
            EmployeeType = (int)EmployeeItem.EmployeeType;
        }
    }
    protected async Task OnSave()
    {
        if (string.IsNullOrEmpty(EmployeeItem.Name) ||
            string.IsNullOrEmpty(EmployeeItem.Surname)||
            EmployeeItem.SalaryPerMonth <= 0||
            (int)EmployeeItem.EmployeeType==-1)
        {
            ShowingErrorMessages = true;
            return;
        }
        ShowingErrorMessages = false;
        HttpResponseMessage response;
        if (Id == Guid.Empty)
        {
            response = await httpClient.PostAsJsonAsync("employee", EmployeeItem);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("employee", EmployeeItem);
        }
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("employeelist");
    }
    protected void OnCancel()
    {
        navigationManager.NavigateTo("employeelist");
    }
}
